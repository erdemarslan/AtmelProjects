
DugmeyleYuruyenLed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000752  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000699  00000000  00000000  0000092e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a3  00000000  00000000  00000fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000126c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000390  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006c  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000168c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
*/


int main(void)
{
	DDRB = 0xFF; // B portunun tamamýný çýkýþ olarak belirleyelim!
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4

	DDRD &= ~(0<<2) | ~(0<<3); // 2. ve 3. pinleri giriþ olarak ayarlýyoruz.
  84:	8a b1       	in	r24, 0x0a	; 10
  86:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<2) | (1<<3); // bu pinleri high yaparak giriþlerin pull-up olduklarýný belirtiyoruz.
  88:	8b b1       	in	r24, 0x0b	; 11
  8a:	8c 60       	ori	r24, 0x0C	; 12
  8c:	8b b9       	out	0x0b, r24	; 11

	PORTB |= (1<<PORTB); // ilk ledi yakýyoruz. Artýk ileri geri komutlarýný vereceðiz.
  8e:	35 b1       	in	r19, 0x05	; 5
  90:	25 b1       	in	r18, 0x05	; 5
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	02 c0       	rjmp	.+4      	; 0x9c <main+0x1c>
  98:	88 0f       	add	r24, r24
  9a:	99 1f       	adc	r25, r25
  9c:	3a 95       	dec	r19
  9e:	e2 f7       	brpl	.-8      	; 0x98 <main+0x18>
  a0:	82 2b       	or	r24, r18
  a2:	85 b9       	out	0x05, r24	; 5

	int led = 0;
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
	
    /* Replace with your application code */
    while (1) 
    {
		// 2. pindeki düðmeye basýlmýþ ise ileri git!
		if(bit_is_clear(PIND, 2) && led < 5) {
  a8:	4a 99       	sbic	0x09, 2	; 9
  aa:	10 c0       	rjmp	.+32     	; 0xcc <main+0x4c>
  ac:	85 30       	cpi	r24, 0x05	; 5
  ae:	91 05       	cpc	r25, r1
  b0:	6c f4       	brge	.+26     	; 0xcc <main+0x4c>
			PORTB <<= 1;
  b2:	25 b1       	in	r18, 0x05	; 5
  b4:	22 0f       	add	r18, r18
  b6:	25 b9       	out	0x05, r18	; 5
			led++;
  b8:	01 96       	adiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	34 e3       	ldi	r19, 0x34	; 52
  be:	4c e0       	ldi	r20, 0x0C	; 12
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	30 40       	sbci	r19, 0x00	; 0
  c4:	40 40       	sbci	r20, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x40>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x4a>
  ca:	00 00       	nop
			_delay_ms(250);
		}

		if (bit_is_clear(PIND, 3) && led > 0)
  cc:	4b 99       	sbic	0x09, 3	; 9
  ce:	ec cf       	rjmp	.-40     	; 0xa8 <main+0x28>
  d0:	18 16       	cp	r1, r24
  d2:	19 06       	cpc	r1, r25
  d4:	4c f7       	brge	.-46     	; 0xa8 <main+0x28>
		{
			PORTB >>=1;
  d6:	25 b1       	in	r18, 0x05	; 5
  d8:	26 95       	lsr	r18
  da:	25 b9       	out	0x05, r18	; 5
			led--;
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	34 e3       	ldi	r19, 0x34	; 52
  e2:	4c e0       	ldi	r20, 0x0C	; 12
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	30 40       	sbci	r19, 0x00	; 0
  e8:	40 40       	sbci	r20, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x64>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x6e>
  ee:	00 00       	nop
  f0:	db cf       	rjmp	.-74     	; 0xa8 <main+0x28>

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
